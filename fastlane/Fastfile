default_platform(:ios)

platform :ios do
  desc "ÏΩîÏΩîÏïÑÌåü ÏÑ§Ïπò ‚Üí ÌÖåÏä§Ìä∏ ‚Üí match ‚Üí ÌÇ§Ï≤¥Ïù∏ ÏÖãÏóÖ"
  lane :custom_release do
    # 2. ÌÖåÏä§Ìä∏ (Ïã§Ìå®Ìï¥ÎèÑ ÏßÑÌñâ)
    scan(
      scheme: "BioLogTests",
      project: "BioLog.xcodeproj",
      fail_build: false,
      skip_build: true,
      clean: true,
      output_types: "html,junit",
      output_directory: "fastlane/test_output",
      build_for_testing: true
    )

    setup_ci
    # 3. Ïù∏Ï¶ùÏÑú Î∞è ÌîÑÎ°úÎπÑÏ†ÄÎãù ÌîÑÎ°úÌååÏùº ÏÑ§Ïπò
    match

    keychain_password = ENV["MATCH_KEYCHAIN_PASSWORD"]

    UI.header("üîì Unlocking login.keychain-db‚Ä¶")
    begin
      unlock_output = sh("security unlock-keychain -p '#{keychain_password}' ~/Library/Keychains/login.keychain-db")
      UI.success("‚úÖ Keychain unlocked successfully")
    rescue => ex
      UI.error("‚ùå Failed to unlock keychain: #{ex.message}")
      raise
    end

    UI.header("üîç Fetching code signing identities‚Ä¶")
    begin
      identities = sh("security find-identity -v -p codesigning")
      UI.message("üîë Available code signing identities:\n#{identities}")
    rescue => ex
      UI.error("‚ö†Ô∏è No code signing identities found or error: #{ex.message}")
      raise
    end

    UI.header("üîê Setting key partition list for codesign‚Ä¶")
    begin
      sh("security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k '#{keychain_password}' ~/Library/Keychains/login.keychain-db")
      UI.success("‚úÖ Key partition list set successfully")
    rescue => ex
      UI.error("‚ùå Failed to set key partition list: #{ex.message}")
    end
  end

  desc "ÎπåÎìú Î∞è TestFlight ÏóÖÎ°úÎìúÎßå ÏßÑÌñâ"
  lane :release_only do
 #   build_app(
 #     project: "BioLog.xcodeproj", 
 #     scheme: "BioLog",
 #     clean: true,
 #     silent: true,
 #    skip_package_pkg: true,
 #     export_method: "app-store",
 #     output_directory: "build",
 #     output_name: "BioLog.ipa",
 #     skip_codesigning: true

     # include_bitcode: false,
     # export_options: {
     #   signingStyle: "manual",
     #   uploadBitcode: false,
     #   uploadSymbols: true,
     #   compileBitcode: false,
     #   provisioningProfiles: { 
     #     "com.Wook.BioLog" => "match AppStore com.Wook.BioLog"
     #   }
    #  }
#    )

    api_key = app_store_connect_api_key(
      key_id: ENV["FASTLANE_APPLE_API_KEY_KEY_ID"],
      issuer_id: ENV["FASTLANE_APPLE_API_KEY_ISSUER_ID"],
      key_content: ENV["FASTLANE_APPLE_API_KEY_CONTENT"],
      is_key_content_base64: true
    )
    UI.message("üîë api_key: #{api_key.inspect}")

latest_number = latest_testflight_build_number(app_identifier: "com.Wook.BioLog") || 0
new_build_number = latest_number + 1

increment_build_number(
  xcodeproj: "BioLog.xcodeproj", 
  build_number: new_build_number,
api_key: api_key
)

build_app(
  project: "BioLog.xcodeproj", 
  scheme: "BioLog",
  # clean: true,
  silent: true,
  skip_package_pkg: true,
  export_method: "app-store",
  output_directory: "build",
  output_name: "BioLog.ipa",
  export_options: {
    signingStyle: "manual",
    provisioningProfiles: {
      "com.Wook.BioLog" => "match AppStore com.Wook.BioLog"
    },
    teamID: "D49753ZB3N", # Î™ÖÏãúÏ†ÅÏúºÎ°ú ÏßÄÏ†ï
    compileBitcode: false,
    uploadSymbols: true,
    uploadBitcode: false
  },
  export_xcargs: [
    "CODE_SIGN_IDENTITY='Apple Distribution: Hyun Wook Lee (D49753ZB3N)'",
    "DEVELOPMENT_TEAM=D49753ZB3N",
    "PROVISIONING_PROFILE_SPECIFIER='match AppStore com.Wook.BioLog'"
  ].join(" ")
)

    pilot(
      api_key: api_key,
      skip_waiting_for_build_processing: true,
      wait_processing_timeout_duration: 120,
      ipa: "build/BioLog.ipa"
    )
  end
end
