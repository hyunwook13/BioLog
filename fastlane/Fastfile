default_platform(:ios)

platform :ios do
  desc "코코아팟 설치 → 테스트 → 인증서 설치 → 빌드 및 TestFlight 업로드"
  lane :custom_release do

    # ✅ 테스트 실행 (실패해도 계속 진행)
    scan(
      scheme: "BioLogTests",
      project: "BioLog.xcodeproj",
      fail_build: false,
      skip_build: true,
      clean: true,
      output_types: "html,junit",
      output_directory: "fastlane/test_output",
      build_for_testing: true
    )

    # ✅ CI 설정
    setup_ci

    # ✅ match 실행 전 디버깅 로그 출력
    UI.header("🔍 ENV 상태 점검 (match 전)")
    {
      "MATCH_PAT" => ENV['MATCH_PAT'],
      "FASTLANE_USER" => ENV['FASTLANE_USER'],
      "FASTLANE_TEAM_ID" => ENV['FASTLANE_TEAM_ID'],
      "MATCH_KEYCHAIN_NAME" => ENV['MATCH_KEYCHAIN_NAME'],
      "MATCH_KEYCHAIN_PASSWORD" => ENV['MATCH_KEYCHAIN_PASSWORD']
    }.each do |key, value|
      UI.message("  🔹 #{key}: #{value ? '✅ SET' : '❌ NOT SET'}")
    end

    matchfile_path = "fastlane/Matchfile"
    if File.exist?(matchfile_path)
      UI.message("📄 Matchfile 존재함")
      UI.message(File.read(matchfile_path)[/git_url\([^\)]*\)/] || "📌 git_url 없음")
    else
      UI.important("❗️ Matchfile이 존재하지 않음")
    end

    test_git_url = "https://hyunwook13:#{ENV['MATCH_PAT']}@github.com/hyunwook13/match_repo.git"
    safe_git_url = test_git_url.gsub(/:.*@/, ':***@')
    UI.message("🔗 Git URL: #{safe_git_url}")

    begin
      UI.message("🧪 Git 인증 테스트 (ls-remote)")
      sh("git ls-remote #{test_git_url}")
      UI.success("✅ Git 인증 성공")
    rescue => e
      UI.error("❌ Git 인증 실패: #{e.message}")
    end

    UI.header("🚀 인증서 및 프로비저닝 프로파일 설치 (match) 시작")

    # ✅ 인증서 및 프로비저닝 프로파일 설치
    begin
      match
      UI.success("🎉 match 성공")
    rescue => error
      UI.error("💥 match 실패!")
      UI.error("에러 메시지: #{error.message}")
      UI.message("🧵 스택:\n#{error.backtrace.take(5).join("\n")}")
      raise error
    end

    # ✅ App Store Connect API 키 설정
    api_key = app_store_connect_api_key(
      key_id: ENV["FASTLANE_APPLE_API_KEY_KEY_ID"],
      issuer_id: ENV["FASTLANE_APPLE_API_KEY_ISSUER_ID"],
      key_content: ENV["FASTLANE_APPLE_API_KEY_CONTENT"],
      is_key_content_base64: true
    )
    UI.message("🔑 api_key: #{api_key.inspect}")

    # ✅ 빌드 번호 증가
    latest_number    = latest_testflight_build_number(app_identifier: "com.Wook.BioLog") || 0
    new_build_number = latest_number + 1

    increment_build_number(
      xcodeproj: "BioLog.xcodeproj",
      build_number: new_build_number
    )

    # ✅ 앱 빌드
    build_app(
      project: "BioLog.xcodeproj",
      scheme: "BioLog",
      silent: true,
      skip_package_pkg: true,
      export_method: "app-store",
      output_directory: "build",
      output_name: "BioLog.ipa",
      export_options: {
        signingStyle: "manual",
        provisioningProfiles: {
          "com.Wook.BioLog" => "match AppStore com.Wook.BioLog"
        },
        teamID: "D49753ZB3N",
        compileBitcode: false,
        uploadSymbols: true,
        uploadBitcode: false
      },
      export_xcargs: [
        "CODE_SIGN_IDENTITY='Apple Distribution: Hyun Wook Lee (D49753ZB3N)'",
        "DEVELOPMENT_TEAM=D49753ZB3N",
        "PROVISIONING_PROFILE_SPECIFIER='match AppStore com.Wook.BioLog'"
      ].join(" ")
    )

    # ✅ TestFlight 업로드
    pilot(
      api_key: api_key,
      skip_waiting_for_build_processing: true,
      wait_processing_timeout_duration: 120,
      ipa: "build/BioLog.ipa"
    )
  end
end
